generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model foods {
  id          Int      @id @default(autoincrement())
  food_names  String?  @db.VarChar(230)
  description String?  @db.Text
  states      Boolean?
  orders      orders[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model likes {
  user_id     Int
  res_id      Int
  date_like   DateTime    @default(now()) @db.DateTime(0)
  users       users       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade, map: "likes_ibfk_1")
  restaurants restaurants @relation(fields: [res_id], references: [res_id], onDelete: Cascade, onUpdate: Cascade, map: "likes_ibfk_2")
  
  
  @@id([user_id, res_id])
  @@index([res_id], map: "res_id")
}

model orders {
  order_id Int    @id @default(autoincrement())
  user_id  Int?
  food_id  Int?
  users    users? @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "orders_ibfk_1")
  foods    foods? @relation(fields: [food_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_ibfk_2")

  @@index([food_id], map: "food_id")
  @@index([user_id], map: "user_id")
}

model rate_res {
  user_id     Int
  res_id      Int
  amount      Int?
  date_rate   String?     @db.VarChar(255)
  users       users       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "rate_res_ibfk_1")
  restaurants restaurants @relation(fields: [res_id], references: [res_id], onDelete: NoAction, onUpdate: NoAction, map: "rate_res_ibfk_2")

  @@id([user_id, res_id])
  @@index([res_id], map: "res_id")
  @@index([user_id], map: "user_id")
}

model restaurants {
  res_id      Int        @id @default(autoincrement())
  res_name    String?    @db.VarChar(255)
  image       String?    @db.VarChar(255)
  description String?    @db.VarChar(255)
  likes       likes[]
  rate_res    rate_res[]
}

model users {
  user_id   Int        @id @default(autoincrement())
  full_name String?    @db.VarChar(255)
  email     String?    @db.VarChar(255)
  password  String?    @db.VarChar(255)
  likes     likes[]
  orders    orders[]
  rate_res  rate_res[]
}
